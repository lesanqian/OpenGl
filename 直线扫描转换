#include <GL/glut.h>
#include <iostream>
#include <cmath>
#include <cctype>
#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;
#define POINTNUM 6

//COLORREF getpixel(int x, int y);

typedef struct Z_POINT
{
	long x;
	long y;
} ZPOINT;

typedef struct Z_EDGE
{
	int ymax;
	int x, dx;
    struct Z_EDGE *next;
}EDGE;

//Z_POINT polypoint[POINTNUM]{ 2,2,5,1,11,3,11,8,5,6,2,7 };
Z_POINT polypoint[POINTNUM]{ 20,20,50,10,110,30,110,80,50,60,20,70 };
void init()
{
	glClearColor(1.0, 1.0, 1.0, 1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 150.0, 0.0, 150.0);
}
void drawpixel(int x, int y, COLORREF color) {
	BYTE r = GetRValue(color);
	BYTE g = GetGValue(color);
	BYTE b = GetBValue(color);
	RGB(r, g, b);
	glBegin(GL_POINTS);//绘制多边形
		glVertex2i(x, y);
	glEnd();
	glFlush();
}
/*void BoundaryFill4(int x, int y, COLORREF boundarycolor, COLORREF newcolor)
{
	COLORREF color;
	color = getpixel(x, y);
		if (color != newcolor && color != boundarycolor)
		{
			drawpixel(x, y, newcolor);
			BoundaryFill4(x, y + 1, boundarycolor, newcolor);
			BoundaryFill4(x, y - 1, boundarycolor, newcolor);
			BoundaryFill4(x - 1, y, boundarycolor, newcolor);
			BoundaryFill4(x + 1, y, boundarycolor, newcolor);
		}
}*/

void Drawpoint() 
{
	int MaxY = 0,MinY=0;
	int i;
	for (i = 0; i < POINTNUM;i++)
		if (polypoint[i].y > MaxY)
			MaxY = polypoint[i].y;
	for (i = 0; i < POINTNUM; i++)
		if (polypoint[i].y < MinY)
			MinY = polypoint[i].y;
	Z_EDGE* pAET = new Z_EDGE;
	pAET->next = NULL;
	Z_EDGE* pNET[2048];
	for (i = 0; i <= MaxY; i++)
	{
		pNET[i] = new Z_EDGE;
		pNET[i]->next = NULL;
	}    

	for (i = MinY; i <= MaxY; i++)//建立NET表
	{
		for (int j = 0; j < POINTNUM; j++)

			if (polypoint[j].y == i)
			{  //一个点跟前面的一个点形成一条线段，跟后面的点也形成线段     
				if (polypoint[(j - 1 + POINTNUM) % POINTNUM].y > polypoint[j].y)
				{
					Z_EDGE* p = new Z_EDGE;
					p->x = polypoint[j].x;
					p->ymax = polypoint[(j - 1 + POINTNUM) % POINTNUM].y;
					p->dx = (polypoint[(j - 1 + POINTNUM) % POINTNUM].x - polypoint[j].x) / (polypoint[(j - 1 + POINTNUM) % POINTNUM].y - polypoint[j].y);
					p->next = pNET[i]->next;
					pNET[i]->next = p;

				}
				if (polypoint[(j + 1 + POINTNUM) % POINTNUM].y > polypoint[j].y)
				{
					Z_EDGE* p = new Z_EDGE;
					p->x = polypoint[j].x;
					p->ymax = polypoint[(j + 1 + POINTNUM) % POINTNUM].y;
					p->dx = (polypoint[(j + 1 + POINTNUM) % POINTNUM].x - polypoint[j].x) / (polypoint[(j + 1 + POINTNUM) % POINTNUM].y - polypoint[j].y);
					p->next = pNET[i]->next;
					pNET[i]->next = p;
				}
			}
	}
	for (i = MinY; i <= MaxY; i++)
	{
		//计算新的交点x,更新AET  
		Z_EDGE* p = pAET->next;
		while (p)
		{
			if (p->ymax > i)
				p->x = p->x + p->dx;
			p = p->next;
		}
	 
		//断表排序,不再开辟空间  
		Z_EDGE* tq = pAET;
		p = pAET->next;
		tq->next = NULL;
		while (p)
		{
			while (tq->next && p->x >= tq->next->x)
				tq = tq->next;
			Z_EDGE* s = p->next;
			p->next = tq->next;
			tq->next = p;
			p = s;
			tq = pAET;
		}
		//(改进算法)先从AET表中删除ymax==i的结点  
		Z_EDGE* q = pAET;
		p = q->next;
		while (p)
		{
			if (p->ymax == i)
			{
				q->next = p->next;
				delete p;
				p = q->next;
			}
			else
			{
				q = q->next;
				p = q->next;
			}
		}
		//将NET中的新点加入AET,并用插入法按X值递增排序
		p = pNET[i]->next;
		q = pAET;
		while (p)
		{
			while (q->next && p->x >= q->next->x)
				q = q->next;
			Z_EDGE* s = p->next;
			p->next = q->next;
			q->next = p;
			p = s;
			q = pAET;
		}
		/******配对填充颜色*/
		glBegin(GL_POINTS);
		p = pAET->next;
		while (p && p->next)
		{
			for (int j = p->x; j <= p->next->x; j++)
				glVertex2i(j, i);
			p = p->next->next;//考虑端点情况  
		}
		glEnd();
		glFlush();
	}
}

void display()
{
	int i,x=5,y=3;
	COLORREF newcolor = RGB(0, 0, 0);
	COLORREF oldcolor = RGB(255, 255, 255);
	glClear(GL_COLOR_BUFFER_BIT);
	//BoundaryFill4(x, y, oldcolor, newcolor);
	glColor3f(0.0, 0.0, 0.0);
	Drawpoint();//多边扫描
	glColor3f(1.0, 0.0, 0.0);
	glLineWidth(1);
	glBegin(GL_LINE_LOOP);//绘制多边形
	for(i=0;i<6;i++)
	glVertex2i(polypoint[i].x, polypoint[i].y);
	glEnd();	
	glFlush();

}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(300, 200);
	glutInitWindowSize(400, 400);
	glutCreateWindow("直线扫描转换");
	init();
	//glOrtho(-17.0, 17.0, -18.0, 17.0, -1.0, 1.0);
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;
}
